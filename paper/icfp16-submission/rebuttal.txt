Thank you for your thoughtful feedback! 

1. Related Work

We thank reviewers B and C for the pointers to extra related 
work -- we will extend the Related Work section to reference 
all of these techniques and papers. 

We share a common goal with type error slicing, though the techniques
differ significantly. Error slicing involves a static analysis of the
typing data and presents multiple candidate error locations, possibly
ranked according to some heuristic. In contrast, we execute the program
and present an execution trace demonstrating the error. Gast's IFL 2004
paper is perhaps the most similar to ours as he produces a data flow
that would violate the typing rules.

Customizable type error messages along the lines of Heeren 2003,
Christiansen 2015, and Serrano Mena 2016 also addresses the issue of
poor type errors. The difference with our work is more pronounced, as
these techniques often rely on domain-specific knowledge to craft
high-quality error messages, whereas our approach is fully automatic but
ignorant of the application domain.


2. Bias in Type Instantiation (?CUT?)

In the `fac` example, asserting that `n` must be an int at the branch is
indeed biased. Our bias is towards the evaluation semantics of the
language, other techniques are biased by their traversal strategy or by
various heuristics.

We would argue, however, (as in Section 5.4) that our bias is more
natural as it is based on a concrete instance of the program crashing.
We will expand the relevant text to clarify this issue. 


3. Overloading / Type Classes

Currently our approach does not support overloading. 

With an overloaded language, reviewer C's variant of `fac`, 
we would get stuck at the `if n <= m` test because `n` and `m` 
are constrained to the same unknown type, but as we do not know 
how to instantiate such types, we  would fail to discover a witness. 

Thus, our formalization (theory) assumes there are no overloaded
(or polymorphic) operators. Furthermore, in our implementation, 
i.e. over *all* our benchmarks,  all the operands are concretized 
*before* they are applied the any (overloaded) operator.

We will describe this issue in the Discussion section, and defer a
treatment of overloading to future work.


4. Scaling to Real-World Code

Our benchmarks are small programs as they were drawn from homework
submissions, the largest being around 200 LoC. While our jump compression 
heuristic may not suffice for larger programs, we could extend it with 
ideas from the slicing literature.

5. Language Features

By "pure subset" of OCaml we mean polymorphic datatypes and records, 
and we will clarify this in the text. Currently, we do not support 
references, modules, or the object system.

Indeed, we implicitly assume all types are inhabited in the formalism, 
and that the generality theorem is weaker in the presence of uninhabited 
types. We will clarify this in the text.
