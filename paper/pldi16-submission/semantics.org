* Type-Carrying
** Syntax
#+BEGIN_SRC text
  E ::= V
     |  E E
     |  if E then E else E
     |  E + E
     |  let X = E in E

  V ::= N
     |  B
     |  \X. E
     |  _N
     |  stuck

  N ::= 0..

  B ::= true | false

  T ::= bool
     |  nat
     |  T -> T
     |  a
#+END_SRC

- probably want to add datatypes
- do we want to deal with env-passing in the description? or leave as implementation detail?

** Semantics

*** relies on =force= and =gen= helpers

#+BEGIN_SRC
gen : T -> V
gen int  = n
gen bool = b
gen (t1 -> t2)  = \x. _i -- fresh i
gen a    = _i -- fresh i

force : V -> T -> (V, Subst)
force _i t
  = let v = gen t
    in (v, _i |-> v)
force n int
  = (n, [])
force v int
  = (stuck, [])
force b bool
  = (b, [])
force v bool
  = (stuck, [])
force (\x. e) (t1 -> t2)
  = (\x -> e, [])
force v (t1 -> t2)
  = (stuck, [])
force v a
  = (v, [])
#+END_SRC

*** Important single-step rules

- note that we can get only get stuck at "primitive" operations
- beta-reduction *does not* type-check the argument

- single-step relation has the form

#+BEGIN_SRC
e, su ~> e', su'
#+END_SRC

**** nats
#+BEGIN_SRC
Rule EPlus-Good
(n1, su1) = force v1 nat
(n2, su2) = force v2 nat
n  = n1+n2
-----------------------------------------------
(v1 + v2, su)
~>
(n, su ++ su1 ++ su2)

Rule EPlus-Bad1
(stuck, su1) = force v1 nat
--------------------------
(v1 + v2, su)
~>
(stuck, su ++ su1)

Rule EPlus-Bad2
(stuck, su1) = force v2 nat
--------------------------
(v1 + v2, su)
~>
(stuck, su ++ su1)
#+END_SRC

**** bools
#+BEGIN_SRC
EIf-Good1
true, su1 = force v1 bool
--------------------
if v1 then e1 else e2, su
~>
e1, su ++ su1

EIf-Good2
false, su1 = force v1 bool
---------------------
if v1 then e1 else e2, su
~>
e2, su ++ su1

EIf-Bad
stuck, su1 = force v1 bool
---------------------------
if v1 then e1 else e2, su
~>
stuck, su ++ su1
#+END_SRC

**** lambdas
#+BEGIN_SRC
EApp-Good
(\x. e), su1 = force v1 (a -> b)
-----------------------------
v1 v2, su
~>
e[x/v2], su ++ su1

EApp-Bad
stuck, su1 = force v1 (a -> b)
-------------------------------
v1 v2, su
~>
stuck v2, su ++ su1
#+END_SRC

**** =stuck= bubbles up
#+BEGIN_SRC
if stuck then e1 else e2, su
~>
stuck, su

stuck + e, su
~>
stuck, su

e + stuck, su
~>
stuck, su

stuck e, su
~>
stuck, su

e stuck, su
~>
stuck, su

let x = stuck in e, su
~>
stuck, su
#+END_SRC

**** other rules
#+BEGIN_SRC
e1, su ~> e2, su1
--------
if e1 then e3 else e4, su
~>
if e2 then e3 else e4, su1

e1, su ~> e2, su1
--------
e1 + e3, su
~>
e2 + e3, su1

e1, su ~> e2, su1
--------
v + e1, su
~>
v + e2, su1

e1, su ~> e2, su1
--------
e1 e3, su
~>
e2 e3, su1

e1, su ~> e2, su1
--------
v e1, su
~>
v e2, su1

e1, su ~> e2, su1
--------
let x = e1 in e3, su
~>
let x = e2 in e2, su1

let x = v in e, su
~>
e[x/v], su
#+END_SRC

* Search Algorithm
** Input
sequence of binders
#+BEGIN_SRC
let x1 = e1
let x2 = e2
...
let xn = en
#+END_SRC

** Output
either

1. expression =e1 e2 .. en= (closed in input binders) such that
#+BEGIN_SRC
e1 e2 .. en ~>* stuck
#+END_SRC

2. =SAFE= if no witness found

** Outline
#+BEGIN_SRC haskell
-- | transitive small-step evaluation.
-- returns a list of possible results, where a result is
-- the final value and a mapping from holes to concrete values
eval :: (E, Subst) -> [(V, Subst)]

subst :: Subst -> [V] -> [V]

mkApps :: V -> [V] -> E

data Result = Safe | Unsafe E

-- | stitches a sequence of binders and a body expression into
-- nested `let` binders
stitchProgram :: [(X,E)] -> E -> E
stitchProgram []           b = b
stitchProgram ((x,e):bnds) b = [[let x = e in]] (stitchProgram bnds b)

isStuck :: V -> Bool

check :: Int -> [(X,E)] -> Result
check numTries bnds = case find (isStuck . fst) (take numTries results) of
  Nothing -> Safe
  Just (_, su) -> Unsafe (mkApps f (subst su args))

  where

  (args, results) = loop []

  f = snd (last bnds)

  build args = stitchProgram bnds (mkApps f args)

  -- | `loop` figures out how many arguments must be supplied to `f` by
  -- iteratively adding holes until `f args` returns something other than
  -- a lambda.
  loop :: [V] -> ([V], [(V, Subst)])
  loop args = case (eval (build args), []) of
    ([[\x.e]], _) : _ -> loop (args `snoc` [[_]])
    results           -> (args, results)
#+END_SRC

* Notes
- HOW DO YOU FORMALIZE "no false positives"??
  1. every =E= reduces to some =V= (aka every normal form is a =V=)
    - ie the only way to get stuck is by stepping to =stuck=
    - only way to step to =stuck= is via a "failed" call to =force=
  2. if =e ~>* stuck=, then type-checker would have rejected =e=
    - strange formulation..
  3. better than (2), if we find =v1..vn= s.t.
     =f v1 .. vn ~>* stuck, tr=, there is no =v1'..vn'= s.t.
     =f v1' .. vn' ~>* v, tr'= where =tr < tr'=
    - ie no other inputs could make further progress /along the same path/
  4. if =f v1 .. vn ~>* stuck= then =t1 -> .. -> tn -> r= is the most
     relaxed signature that would have been reasonable, but even that
     failed.
  5. if =f v1 .. vn ~>* stuck=, no matter what type you try to assign
     to =f=, there exists some inputs =v1 .. vn= that will make =f= stuck.
     - not necessarily true if we use js-style =fun= type.
       - could stop at lambda, waiting for inputs

     - sketch:
       given a relation =t1 < t2 := \exists su. t1 = su(t2)=

       =f   v1 .. vn ~> stuck=

       we implicitly compute

       =f : t = t1 -> .. -> tn -> _=

       as the "most plausible type" for =f=

       \forall =s = s1 -> .. -> sn -> _=.
         \exist =w1 : s1 .. wn : sn=.
           =f w1 .. wn ~> stuck=

       (1) =s < t=, in which case we can re-use =v1 .. vn=
       (2) =s </ t=, in which case we would have encountered a
           failed =force= at some point earlier.
          - we don't make arbitrary choices for types, they are forced
            upon us by the shape of the expression


- Proof of (1)
  - Suppose =t= not a value, =t= cannot be a normal form
  - will use Lemma =Stuck-Bubble=: any term containing =stuck= will reduce to =stuck=
  - case =v=: trivial
  - case =e1 e2=:
    1. if =e1 = v1= and =e2 = v2=:
       either =EApp-Good= or =EApp-Bad= must apply, as =force v (T -> T)=
       returns =(\x.e)= or =stuck= for all =v=.
    2. if =e1 = v=: then =e2 ~> e3= by ind.hyp., so =EApp-Step2= applies
    3. otherwise =e1 ~> e3= by ind.hyp., so =EApp-Step1= applies
  - case =if e1 then e2 else e2=:
    1. if =e1 = v=:
       either =EIf-Good1= or =EIf-Good2= or =EIf-Bad= must apply, as =force v bool=
       returns =true= =false= or =stuck= for all =v=.
    2. otherwise =e1 ~> e11= by ind.hyp. so =EIf-Step= applies.
  - case =e1 + e2=:
    1. if =e1 = v1= and =e2 = v2=:
       either =EPlus-Good= or =EPlus-Bad1= or =EPlus-Bad2= must apply, as =force v int=
       returns =n= or =stuck= for all =v=.
    2. if =e1 = v=: then =e2 ~> e3= by ind.hyp., so =EPlus-Step2= applies
    3. otherwise =e1 ~> e3= by ind.hyp., so =EPlus-Step1= applies
  - case =let x = e1 in e2=:
    1. if =e1 = v1=, =ELet-Sub= applies
    2. otherwise =e1 ~> e3= by ind.hyp., so =ELet-Step= applies
  # - case EPlus-{Good,Bad1,Bad2}: single-step produces a value directly
  # - case EIf-{Bad}: single-step produces a value directly

- Proof of (2)
  - want to do some induction on eval derivation
  - note that =force= encapsulates places where program could get stuck
    - ie all =stuck= terms are created by =force=
  - note that =gen= is permissive, ie =gen a = _=
    - (only relevant for polymorphic lang)
  - note that =EApp= *does not* do any type checking beyond ensuring
    that =e1= is a function

- Proof of (5)
  - what is the inductive argument for case =s </ t=??
  - suppose =f : s -> r, s </t=, \forall =v : s=. =f v ~> stuck=
  - Lemma: only =force= instantiates hole with concrete value
    - Proof: by case analysis on rules
  - Lemma: if we infer a non-fully polymorphic type for =t=
    (i.e. anything other than =forall a. a=), we *must* have
    called =force= on the argument.
    - Proof: by induction on eval derivation?
  -

- make a lattice of types?
  - what is the edge relation?

- failing "as late as possible"
  - given a path through CFG that crashes at location 't'
  - there is no trace that goes beyond 't'
    - ¬∃t'. t < t'

- [ ] s/t1 -> t2/fun/
- [X] add Subst-tracking to operational semantics
- [ ] make sure Subst-tracking doesn't affect ~Proof of (1)~
