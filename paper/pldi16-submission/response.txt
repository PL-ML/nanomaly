We thank the reviewers for their enthusiastic comments, and will briefly
respond to the main critiques.


Formalism
---------

While we have implemented (and evaluated) our technique on a pure subset
of OCaml -- including algebraic datatypes, polymorphism, and type
annotations -- we restricted the formalism to a simpler language because
the additional constructs do not add significant complexity to the
technique. We simply treat constructor application, case analysis, type
annotation, etc. as primitive operations like `+` and `if`; they narrow
the partial types of values and force instantiation. However, in light
of the reviews it is clear that this is not obvious to the reader, so we
will add text to Section 3 to list additional language features that can
be handled as primitive operations from the perspective of our
semantics.

We also thank Reviewer B in particular for pointing out two bugs in our
proof. We have refactored the substitutions in the formalism to be
properly threaded through `narrow` and `E-Plus-Good`. We have also
changed our definition of type compatibility to the usual one, fixing the

  (([]_1, []_2), []_3) ~ ([]_4, ([]_5, []_6))

example (while partial types do grow monotonically, in Lemma 4
specifically we are concerned with *any* value, so we must account for
this case).


Representivity of the datasets
------------------------------

Between our dataset and the UW dataset, we have numerous instances of
writing higher-order functions and instantiating their arguments, as
well as two different expression evaluators. We will expand the text in
Section 5 to describe the generality of the datasets, including a list
of language features and idioms that are present.


Pedagogic motivation for witnesses and traces
---------------------------------------------

We are also convinced of the importance of witnesses and traces for
debugging and did not intend this paper to specifically present evidence
in their favor. We will update the motivation and conclusion to clarify
that the scope of the paper is to present algorithmic and empirical
evidence that generating witnesses is practical for type errors.
